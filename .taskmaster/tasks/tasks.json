{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Next.js Project with Portfolio Starter Kit Template",
        "description": "Initialize the Next.js project using the Vercel Portfolio Starter Kit template and configure the development environment",
        "details": "1. Clone or initialize from Portfolio Starter Kit template\n2. Install dependencies respecting current directory package.json versions\n3. Configure TypeScript and Tailwind CSS\n4. Set up basic project structure with /app directory for App Router\n5. Configure next.config.js for MDX support\n6. Set up development scripts and environment variables\n7. Initialize git repository and create initial commit",
        "testStrategy": "Verify project starts successfully with `npm run dev`, check that all dependencies install without conflicts, ensure TypeScript compilation works, and confirm Tailwind CSS is properly configured",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize Next.js Project from Portfolio Starter Kit Template",
            "description": "Clone or create a new Next.js project using the Vercel Portfolio Starter Kit template as the foundation",
            "dependencies": [],
            "details": "Use 'npx create-next-app@latest' with the Portfolio Starter Kit template or clone the repository. Ensure the project is initialized with TypeScript, Tailwind CSS, and App Router configuration. Verify the basic project structure matches the Portfolio Starter Kit layout.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Install and Manage Project Dependencies",
            "description": "Install all required dependencies while respecting existing package.json versions and resolving any conflicts",
            "dependencies": [],
            "details": "Run npm install to install base dependencies. Add additional packages needed for MDX processing, content management, and any missing utilities. Check for version conflicts and update package.json accordingly. Verify all dependencies install cleanly without warnings.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Configure TypeScript and Type Definitions",
            "description": "Set up TypeScript configuration and create necessary type definitions for the blog system",
            "dependencies": [],
            "details": "Verify tsconfig.json is properly configured for Next.js App Router. Create type definitions for blog posts, frontmatter metadata, and other custom interfaces. Ensure TypeScript compilation works without errors and strict mode is enabled.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Configure Tailwind CSS and Styling System",
            "description": "Set up Tailwind CSS configuration to match Portfolio Starter Kit design system",
            "dependencies": [],
            "details": "Verify tailwind.config.js includes proper content paths and theme configuration. Ensure CSS imports are correctly set up in the root layout. Test that Tailwind classes are working and the design system is properly integrated.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Configure Next.js Settings and MDX Support",
            "description": "Set up next.config.js with proper configuration for MDX processing and other project requirements",
            "dependencies": [],
            "details": "Configure next.config.js to support MDX compilation, set up proper webpack configurations if needed, and ensure experimental features like App Router are properly enabled. Add any necessary plugins for content processing.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Set Up Development Scripts and Environment Variables",
            "description": "Configure package.json scripts and environment variables for development workflow",
            "dependencies": [],
            "details": "Verify development scripts (dev, build, start, lint) are properly configured in package.json. Set up environment variables for development and production. Create .env.local template and document required environment variables.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Initialize Git Repository and Create Initial Commit",
            "description": "Set up version control and create the initial project commit with proper gitignore configuration",
            "dependencies": [],
            "details": "Initialize git repository if not already done. Verify .gitignore includes all necessary exclusions (node_modules, .next, .env.local, etc.). Create initial commit with the complete project setup. Verify the project starts successfully with 'npm run dev'.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 2,
        "title": "Configure MDX Processing Pipeline",
        "description": "Set up MDX compilation and processing system to handle blog posts with frontmatter metadata",
        "details": "1. Install and configure @next/mdx and related packages\n2. Create MDX components provider for custom component mapping\n3. Set up frontmatter parsing using gray-matter or similar\n4. Configure MDX compilation in next.config.js\n5. Create utility functions for reading and parsing MDX files\n6. Set up content directory structure (/content/posts/)\n7. Create TypeScript interfaces for BlogPost data model",
        "testStrategy": "Create sample MDX files with frontmatter, verify they compile correctly, test frontmatter parsing returns expected metadata, and ensure MDX content renders as React components",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Install and Configure MDX Packages",
            "description": "Install @next/mdx, @mdx-js/loader, @mdx-js/react and configure basic MDX support in Next.js",
            "dependencies": [],
            "details": "Install required packages: @next/mdx, @mdx-js/loader, @mdx-js/react, and any additional MDX plugins. Configure next.config.js to enable MDX processing and set up file extensions. Ensure TypeScript support is properly configured for MDX files.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Configure Frontmatter Parsing System",
            "description": "Set up gray-matter or similar package to parse YAML frontmatter from MDX files",
            "dependencies": [
              "2.1"
            ],
            "details": "Install gray-matter package for frontmatter parsing. Create utility functions to extract and parse frontmatter metadata from MDX files. Set up TypeScript interfaces for frontmatter data structure including title, date, tags, categories, and description fields.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Set Up MDX Compilation Configuration",
            "description": "Configure MDX compilation settings in next.config.js with proper plugins and options",
            "dependencies": [
              "2.1",
              "2.2"
            ],
            "details": "Configure next.config.js with MDX compilation settings. Set up MDX plugins for syntax highlighting, code blocks, and other content features. Configure compilation options for production optimization and development experience.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Create MDX Components Provider",
            "description": "Set up MDX components provider for custom component mapping and styling",
            "dependencies": [
              "2.3"
            ],
            "details": "Create MDXComponents provider to map HTML elements to custom React components. Set up custom components for headings, links, code blocks, and other MDX elements. Configure component styling to match the existing design system.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Implement MDX File Reading Utilities",
            "description": "Create utility functions for reading, parsing, and processing MDX files from the content directory",
            "dependencies": [
              "2.2"
            ],
            "details": "Create utility functions to read MDX files from /content/posts/ directory. Implement functions to parse frontmatter and compile MDX content. Set up error handling for malformed files and missing metadata.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Set Up Content Directory Structure",
            "description": "Create organized directory structure for MDX content files and establish naming conventions",
            "dependencies": [],
            "details": "Create /content/posts/ directory structure for organizing blog posts. Establish file naming conventions and directory organization. Set up any additional content directories for pages or other content types.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Create TypeScript Interfaces for Blog Data",
            "description": "Define comprehensive TypeScript interfaces for blog post data model and metadata structure",
            "dependencies": [
              "2.2"
            ],
            "details": "Create TypeScript interfaces for BlogPost, BlogMetadata, and related data structures. Define types for frontmatter fields including title, date, slug, tags, categories, description, and any custom fields. Ensure type safety across the MDX processing pipeline.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 3,
        "title": "Implement Core Blog Routing and Pages",
        "description": "Create the fundamental blog pages including post listing, individual post pages, and basic navigation structure",
        "details": "1. Create /app/blog/page.tsx for blog post listing\n2. Implement /app/blog/[slug]/page.tsx for individual posts\n3. Create utility functions to fetch all posts and get post by slug\n4. Implement static generation with generateStaticParams\n5. Create basic post listing component with date sorting\n6. Set up individual post layout with title, date, and content\n7. Implement basic navigation component matching existing structure",
        "testStrategy": "Verify blog listing page displays all posts correctly, test individual post pages render with proper content and metadata, ensure static generation works for all posts, and validate navigation links function properly",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Blog Listing Page Component",
            "description": "Implement the main blog listing page at /app/blog/page.tsx with post sorting and basic layout",
            "dependencies": [],
            "details": "Create /app/blog/page.tsx component that displays all blog posts in a sorted list by date. Include post titles, dates, excerpts, and links to individual posts. Implement proper TypeScript interfaces for post data structure.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Create Individual Post Page Component",
            "description": "Implement dynamic post pages at /app/blog/[slug]/page.tsx for rendering individual blog posts",
            "dependencies": [],
            "details": "Create /app/blog/[slug]/page.tsx component that renders individual blog posts with full content, metadata, and proper layout. Include post title, publication date, content rendering, and navigation elements.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Develop Post Fetching Utility Functions",
            "description": "Create utility functions for fetching all posts and retrieving posts by slug",
            "dependencies": [],
            "details": "Implement getAllPosts() and getPostBySlug() utility functions in a shared utils directory. Handle markdown parsing, frontmatter extraction, and post sorting logic. Include proper error handling and TypeScript types.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement Static Generation Configuration",
            "description": "Set up generateStaticParams for static generation of all blog routes",
            "dependencies": [
              "3.2",
              "3.3"
            ],
            "details": "Implement generateStaticParams functions in both blog listing and individual post pages to enable static generation at build time. Ensure all post slugs are properly generated for static paths.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Create Basic Navigation Component",
            "description": "Implement navigation component for blog pages matching existing site structure",
            "dependencies": [],
            "details": "Create a navigation component that integrates with the existing site navigation structure. Include links to blog listing, home page, and other main sections. Ensure consistent styling and responsive behavior.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Implement Post Listing Component with Sorting",
            "description": "Create reusable post listing component with date-based sorting functionality",
            "dependencies": [
              "3.3"
            ],
            "details": "Build a PostList component that can be reused across different pages. Include sorting by publication date, post preview cards with metadata, and proper loading states. Make it configurable for different display modes.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Set Up Individual Post Layout and Content Rendering",
            "description": "Create post layout component with proper content rendering and metadata display",
            "dependencies": [
              "3.3"
            ],
            "details": "Implement PostLayout component that handles markdown content rendering, metadata display (title, date, tags), and proper typography. Include support for code highlighting and other markdown features.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "Migrate Existing Blog Content",
        "description": "Transfer all blog posts from the existing Eleventy project to the new Next.js structure",
        "details": "1. Audit existing blog posts in /Users/ak/Workspace/Projects/aakash-patel\n2. Create migration script to copy posts to /content/posts/\n3. Convert any Eleventy-specific frontmatter to standard format\n4. Preserve existing URL structure with /posts/[slug] format\n5. Migrate associated assets (images, files) to /public directory\n6. Update internal links and asset references in posts\n7. Validate all posts have required frontmatter fields",
        "testStrategy": "Verify all existing posts are successfully migrated, check that frontmatter parsing works for all posts, ensure asset links resolve correctly, and validate that URL structure matches original site",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Implement Category System",
        "description": "Create category pages with filtering and organization capabilities",
        "details": "1. Create /app/blog/categories/[category]/page.tsx for category listings\n2. Implement utility functions to extract unique categories from posts\n3. Create category listing components with proper styling\n4. Add generateStaticParams for all category pages\n5. Implement filtering logic to show posts by category\n6. Add category links to individual post pages\n7. Create category overview page showing all available categories\n8. Implement breadcrumb navigation for category pages",
        "testStrategy": "Verify category pages display correct filtered posts, test category overview page shows all categories, ensure all category pages generate statically, and validate links between posts and category pages work correctly",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Tag Pages Component System",
            "description": "Implement tag-based taxonomy pages with dynamic routing and filtering capabilities",
            "dependencies": [],
            "details": "Create /app/blog/tags/[tag]/page.tsx for individual tag pages, implement tag listing components with proper styling, add generateStaticParams for all tag pages, and implement filtering logic to show posts by specific tags",
            "status": "skipped",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Create Category Pages Component System",
            "description": "Implement category-based taxonomy pages with dynamic routing and filtering capabilities",
            "dependencies": [],
            "details": "Create /app/blog/categories/[category]/page.tsx for individual category pages, implement category listing components with proper styling, add generateStaticParams for all category pages, and implement filtering logic to show posts by specific categories",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Develop Taxonomy Utility Functions",
            "description": "Create reusable utility functions for extracting and managing taxonomy data from posts",
            "dependencies": [],
            "details": "Implement functions to extract unique tags and categories from posts, create sorting and filtering utilities, develop taxonomy data validation functions, and implement helper functions for generating taxonomy URLs and slugs",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement Static Generation for Taxonomy Pages",
            "description": "Set up static generation system for all taxonomy-related pages",
            "dependencies": [
              "5.3"
            ],
            "details": "Configure generateStaticParams for tag and category pages, implement build-time generation of all taxonomy routes, optimize static generation performance, and ensure proper fallback handling for dynamic taxonomy pages",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Create Taxonomy Overview Pages",
            "description": "Build overview pages that display all available tags and categories",
            "dependencies": [
              "5.1",
              "5.2"
            ],
            "details": "Create /app/blog/tags/page.tsx showing all available tags, create /app/blog/categories/page.tsx showing all available categories, implement tag and category cloud components, and add proper navigation between overview and individual taxonomy pages",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Implement Taxonomy Linking System",
            "description": "Create comprehensive linking system between posts and taxonomy pages",
            "dependencies": [
              "5.1",
              "5.2"
            ],
            "details": "Add tag and category links to individual post pages, implement breadcrumb navigation for taxonomy pages, create related posts functionality based on shared taxonomy, and ensure proper link styling and hover states",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Develop Taxonomy Filtering and Search",
            "description": "Implement advanced filtering and search capabilities for taxonomy systems",
            "dependencies": [
              "5.3",
              "5.4"
            ],
            "details": "Create multi-tag and multi-category filtering functionality, implement search within taxonomy results, add sorting options for taxonomy-filtered posts, and create URL parameter handling for complex filtering scenarios",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "Create Taxonomy Management Components",
            "description": "Build reusable components for displaying and managing taxonomy information",
            "dependencies": [
              "5.3",
              "5.6"
            ],
            "details": "Create taxonomy badge components for tags and categories, implement taxonomy count displays, build taxonomy navigation components, and create responsive taxonomy layouts for mobile and desktop views",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "Implement SEO and Metadata System",
        "description": "Set up comprehensive SEO optimization including meta tags, structured data, and sitemaps",
        "details": "1. Implement Next.js metadata API for all pages\n2. Create dynamic metadata generation for blog posts using frontmatter\n3. Set up Open Graph and Twitter Card meta tags\n4. Implement JSON-LD structured data for blog posts\n5. Create sitemap.xml generation using Next.js sitemap API\n6. Set up robots.txt configuration\n7. Implement canonical URLs and proper meta descriptions\n8. Add schema.org markup for blog content",
        "testStrategy": "Validate meta tags are correctly generated for all pages, test Open Graph preview in social media validators, verify sitemap.xml contains all pages, and check structured data using Google's Rich Results Test",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement Next.js Metadata API",
            "description": "Set up dynamic metadata generation using Next.js 13+ metadata API for all pages including blog posts, categories, and static pages",
            "dependencies": [],
            "details": "Create metadata configuration in layout.tsx and page.tsx files, implement generateMetadata function for dynamic pages, set up default metadata fallbacks, and ensure proper title templates and descriptions are generated for all routes",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Configure Open Graph and Twitter Cards",
            "description": "Implement comprehensive Open Graph and Twitter Card meta tags for enhanced social media sharing",
            "dependencies": [
              "6.1"
            ],
            "details": "Set up og:title, og:description, og:image, og:url, and og:type meta tags, configure Twitter Card meta tags including twitter:card, twitter:title, twitter:description, and twitter:image, create dynamic image generation for blog posts, and test social media preview functionality",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement JSON-LD Structured Data",
            "description": "Create JSON-LD structured data markup for blog posts and website information to enhance search engine understanding",
            "dependencies": [
              "6.1"
            ],
            "details": "Implement Article schema for blog posts with author, datePublished, dateModified, and headline properties, add WebSite schema with searchAction, create Person schema for author information, and validate structured data using Google's Rich Results Test",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Set up Sitemap Generation",
            "description": "Implement automated sitemap.xml generation using Next.js sitemap API to help search engines discover all pages",
            "dependencies": [],
            "details": "Create sitemap.ts file using Next.js sitemap API, include all static pages, blog posts, and category pages, implement dynamic sitemap generation with proper lastModified dates, set appropriate changeFrequency and priority values, and ensure sitemap is accessible at /sitemap.xml",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Implement Schema.org Markup",
            "description": "Add comprehensive schema.org markup throughout the site for better semantic understanding by search engines",
            "dependencies": [
              "6.3"
            ],
            "details": "Implement BlogPosting schema markup for individual blog posts, add Organization schema for site identity, create BreadcrumbList schema for navigation, implement WebPage schema for static pages, and ensure all schema markup validates correctly",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Configure Robots.txt and Canonical URLs",
            "description": "Set up robots.txt configuration and implement canonical URL system to prevent duplicate content issues",
            "dependencies": [
              "6.4"
            ],
            "details": "Create robots.txt file with appropriate crawling directives, implement canonical URL meta tags for all pages, set up proper URL structure to avoid duplicate content, configure sitemap reference in robots.txt, and ensure canonical URLs are absolute and consistent",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Implement Dynamic Meta Descriptions",
            "description": "Create system for generating compelling and SEO-optimized meta descriptions for all pages",
            "dependencies": [
              "6.1"
            ],
            "details": "Extract and truncate blog post excerpts for meta descriptions, create template-based descriptions for category pages, implement fallback descriptions for pages without custom content, ensure descriptions are within 150-160 character limit, and avoid duplicate descriptions across pages",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "SEO Validation and Testing",
            "description": "Comprehensive testing and validation of all SEO implementations using various tools and validators",
            "dependencies": [
              "6.1",
              "6.2",
              "6.3",
              "6.4",
              "6.5",
              "6.6",
              "6.7"
            ],
            "details": "Test meta tags generation across all page types, validate Open Graph previews using Facebook and Twitter validators, verify structured data using Google's Rich Results Test and Schema.org validator, test sitemap accessibility and format, check robots.txt configuration, and perform comprehensive SEO audit using tools like Lighthouse",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 7,
        "title": "Create RSS Feed Generation",
        "description": "Implement RSS feed endpoint for blog syndication",
        "details": "1. Create /app/feed.xml/route.ts API route for RSS generation\n2. Implement RSS XML generation using all blog posts\n3. Include proper RSS metadata (title, description, link, pubDate)\n4. Sort posts by date in descending order\n5. Include full post content or excerpts in RSS items\n6. Set proper Content-Type headers for XML response\n7. Add RSS feed link to site header/meta tags",
        "testStrategy": "Verify RSS feed generates valid XML, test feed in RSS readers, ensure all posts appear with correct metadata, and validate feed validates against RSS specification",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implement Responsive Design and Dark Mode",
        "description": "Apply Portfolio Starter Kit design system with responsive layout and dark/light mode toggle",
        "details": "1. Implement dark/light mode toggle using next-themes\n2. Apply Portfolio Starter Kit color scheme and typography\n3. Ensure responsive design works across mobile and desktop\n4. Style blog post content with proper typography classes\n5. Implement responsive navigation menu\n6. Add proper spacing and layout for blog listing and individual posts\n7. Ensure accessibility standards are met (WCAG 2.1)\n8. Test cross-browser compatibility",
        "testStrategy": "Test responsive design on various screen sizes, verify dark/light mode toggle works correctly, validate accessibility with screen readers, and ensure consistent styling across all browsers",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "in-progress",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Performance Optimization and Image Handling",
        "description": "Optimize site performance to achieve 90+ Lighthouse scores with proper image optimization",
        "details": "1. Implement Next.js Image component for all blog images\n2. Set up image optimization in next.config.js\n3. Implement lazy loading for blog post listings\n4. Optimize bundle size by analyzing and splitting code\n5. Set up proper caching headers for static assets\n6. Implement preloading for critical resources\n7. Optimize fonts and CSS delivery\n8. Run Lighthouse audits and address performance issues",
        "testStrategy": "Run Lighthouse audits to achieve 90+ performance score, test image loading and optimization, verify lazy loading works correctly, and measure Core Web Vitals metrics",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Production Deployment and Final Testing",
        "description": "Deploy the migrated blog to production and perform comprehensive testing",
        "details": "1. Configure production build settings and environment variables\n2. Set up deployment pipeline (Vercel recommended)\n3. Configure custom domain and SSL certificates\n4. Implement proper redirects from old URLs if needed\n5. Set up monitoring and analytics\n6. Perform comprehensive cross-browser testing\n7. Validate all links and ensure no broken references\n8. Test performance in production environment\n9. Create backup and rollback procedures",
        "testStrategy": "Verify production deployment works correctly, test all functionality in production environment, validate SSL certificates and domain configuration, and ensure monitoring systems are operational",
        "priority": "low",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-21T06:11:43.037Z",
      "updated": "2025-07-23T02:28:24.774Z",
      "description": "Tasks for master context"
    }
  }
}